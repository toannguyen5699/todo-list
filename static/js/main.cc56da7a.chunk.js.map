{"version":3,"sources":["img/check.svg","img/check-complete.svg","img/tick.svg","components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","this","props","item","onClick","url","checkImg","isComplete","checkCompleteImg","className","classNames","src","width","height","title","Component","App","state","newItem","todoItems","onKeyUp","bind","onChange","event","index","indexOf","setState","slice","keyCode","text","target","value","trim","tick","type","placeholder","length","map","key","onItemClicked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,kC,uSC2B5BC,E,iLAlBH,IAAD,EACkBC,KAAKC,MAAtBC,EADD,EACCA,KAAMC,EADP,EACOA,QACVC,EAAMC,IAKV,OAJIH,EAAKI,aACPF,EAAMG,KAIN,yBAAKJ,QAASA,EAASK,UAAWC,IAAW,WAAY,CACvD,oBAAqBP,EAAKI,cAE1B,yBAAKI,IAAON,EAAKO,MAAO,GAAIC,OAAQ,KACpC,2BAAIZ,KAAKC,MAAMC,KAAKW,Y,GAdLC,a,wkBCqFRC,E,YArFb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,QAAS,GACTC,UAAY,CACV,CAAEL,MAAO,cAAeP,YAAY,GACpC,CAAEO,MAAO,aAAcP,YAAY,GACnC,CAAEO,MAAO,iBAIb,EAAKM,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAZJ,E,2EAeAlB,GAAO,IAAD,OAClB,OAAO,SAACoB,GACN,IAAMhB,EAAaJ,EAAKI,WAChBY,EAAc,EAAKF,MAAnBE,UACFK,EAAQL,EAAUM,QAAQtB,GAChC,EAAKuB,SAAS,CACZP,UAAU,GAAD,mBACJA,EAAUQ,MAAM,EAAGH,IADf,MAGFrB,EAHE,CAILI,YAAaA,KAJR,YAMJY,EAAUQ,MAAMH,EAAQ,U,8BAM3BD,GACN,GAAsB,KAAlBA,EAAMK,QAAgB,CACxB,IAAIC,EAAON,EAAMO,OAAOC,MACxB,IAAKF,EACH,OAGF,KADAA,EAAOA,EAAKG,QACC,OAGb/B,KAAKyB,SAAS,CACZR,QAAS,GACTC,UAAU,CACR,CAAEL,MAAOe,EAAMtB,YAAY,IADpB,mBAEJN,KAAKgB,MAAME,iB,+BAMbI,GACPtB,KAAKyB,SAAS,CACZR,QAASK,EAAMO,OAAOC,U,+BAIhB,IAAD,SACwB9B,KAAKgB,MAA5BE,EADD,EACCA,UAAWD,EADZ,EACYA,QACnB,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKE,IAAKsB,IAAMrB,MAAO,GAAIC,OAAQ,KACnC,2BACAqB,KAAK,OACLC,YAAY,gBACZJ,MAAOb,EACPI,SAAUrB,KAAKqB,SACfF,QAASnB,KAAKmB,WAEfD,EAAUiB,OAAS,GAAKjB,EAAUkB,IAAI,SAAClC,EAAMqB,GAAP,OACrC,kBAAC,EAAD,CACEc,IAAKd,EACLrB,KAAMA,EACNC,QAAS,EAAKmC,cAAcpC,OAEV,IAArBgB,EAAUiB,QAAgB,oB,GA/EjBrB,aCMEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cc56da7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.40eb9cc6.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-complete.4b93446c.svg\";","module.exports = __webpack_public_path__ + \"static/media/tick.184e8a4f.svg\";","import classNames from 'classnames';\nimport React , { Component } from 'react';\nimport './TodoItem.css';\nimport checkImg from '../img/check.svg';\nimport checkCompleteImg from '../img/check-complete.svg';\n\n\nclass TodoItem extends Component {\n\n  render() {\n    const { item, onClick } =this.props;\n    let url = checkImg;\n    if (item.isComplete) {\n      url = checkCompleteImg;\n    }\n\n    return (\n      <div onClick={onClick} className={classNames('TodoItem', {\n        'TodoItem-complete': item.isComplete\n      })}>\n        <img src = {url} width={32} height={32} />\n        <p>{this.props.item.title}</p>\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoItem from './components/TodoItem';\nimport tick from './img/tick.svg';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      newItem: '',\n      todoItems : [\n        { title: 'Mua bim bim', isComplete: true},\n        { title: 'Di da bong', isComplete: true},\n        { title: 'Di nghi mat'}\n      ]\n    }\n\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onItemClicked(item) {\n    return (event) => {\n      const isComplete = item.isComplete;\n      const { todoItems } = this.state;\n      const index = todoItems.indexOf(item);\n      this.setState({\n        todoItems: [\n          ...todoItems.slice(0, index),\n          {\n            ...item,\n            isComplete: !isComplete\n          },\n          ...todoItems.slice(index + 1)\n        ]\n      })\n    }\n  }\n\n  onKeyUp(event) {\n    if (event.keyCode === 13) {\n      let text = event.target.value;\n      if (!text) {\n        return;\n      }\n      text = text.trim();\n      if (!text) { return; }\n\n\n      this.setState({\n        newItem: '',\n        todoItems: [\n          { title: text, isComplete: false },\n          ...this.state.todoItems,\n        ]\n      });\n  }\n}\n\n  onChange(event) {\n    this.setState({\n      newItem: event.target.value\n    })\n  }\n\n  render() {\n    const { todoItems, newItem } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"Header\">\n          <img src={tick} width={32} height={32} />\n          <input \n          type=\"text\" \n          placeholder=\"Add a newItem\" \n          value={newItem}\n          onChange={this.onChange}\n          onKeyUp={this.onKeyUp}/>\n        </div>\n        {todoItems.length > 0 && todoItems.map((item, index) => (\n          <TodoItem \n            key={index} \n            item={item} \n            onClick={this.onItemClicked(item)}/>\n        ))}\n        {todoItems.length === 0 && 'Nothing here'}\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}